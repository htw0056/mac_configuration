#!/usr/bin/env bash
#=============================================================================#
#   htw0056's Bash Util
#   Author: htw0056 (huangtw1995@outlook.com)
#=============================================================================#


#=============================================================================#
# TOC                                                                         #
#—————————————————————————————————————————————————————————————————————————————#
# trash
# cd
# ls
# vim
# ssh
# git
# zip
# admin
# node
# python
# nginx
# redis
# psotgres
# encoding
# network
# darwin
#=============================================================================#

#=============================================================================#
#
#   DON'T USE rm
#   OR YOU WILL CRY!
#—————————————————————————————————————————————————————————————————————————————#
trash()
{
    for i in $*; do  
        STAMP=`date +%s`  
        fileName=`basename $i`  
        mv $i ${HOME}/usr/trash/$fileName.$STAMP  
        echo "move $i to ${HOME}/usr/trash/"
    done
}
cleantrash()
{
    rm -rf ${HOME}/usr/trash/*
    echo "clean ${HOME}/usr/trash/*"
}
#=============================================================================#
# cd                                                                          #
#—————————————————————————————————————————————————————————————————————————————#
alias ~="cd ~"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias dev="cd ~/Dev"
alias down="cd ~/Downloads"
alias doc="cd ~/Document"
#—————————————————————————————————————————————————————————————————————————————#
# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
#=============================================================================#


#=============================================================================#
# grep                                                                        #
#—————————————————————————————————————————————————————————————————————————————#
alias grep="grep --color=auto"
alias fgrep="fgrep --color=auto"
alias egrep="egrep --color=auto"
#—————————————————————————————————————————————————————————————————————————————#


#=============================================================================#
# ls                                                                          #
#—————————————————————————————————————————————————————————————————————————————#
# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi
#—————————————————————————————————————————————————————————————————————————————#
# List all files colorized in long format
alias ll="ls -lh ${colorflag}"
alias l="ls -lh ${colorflag}"
#—————————————————————————————————————————————————————————————————————————————#
# List all files colorized in long format, including dot files
alias la="ls -lha ${colorflag}"
alias lsa="ls -a ${colorflag}"
#—————————————————————————————————————————————————————————————————————————————#
# List only directories
alias lsd="ls -lh ${colorflag} | grep --color=never '^d'"
#—————————————————————————————————————————————————————————————————————————————#
# Always use color output for `ls`
alias ls="command ls ${colorflag}"
if [ "$TERM" != "dumb" ]; then
    if [ -e "$HOME/.dircolors" ]; then
        eval "`dircolors -b $HOME/.dircolors`"
    else
        export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'
    fi
fi
#=============================================================================#


#=============================================================================#
# vim                                                                         #
#—————————————————————————————————————————————————————————————————————————————#
function v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

alias vi="vim"
alias vivim='vim $HOME/.vimrc'
alias virc='vim $HOME/.bashrc'
alias viprofile='vim $HOME/.bash_profile'
alias vienv='vim $HOME/.bash_inc/env'
alias viutil='vim $HOME/.bash_inc/util'
alias viprivate='vim $HOME/.bash_inc/private'
alias vissh='vim $HOME/.ssh/config'
alias vihost='vim /etc/hosts'
#=============================================================================#


#=============================================================================#
# ssh                                                                         #
#—————————————————————————————————————————————————————————————————————————————#
alias et="ssh et";
alias a0="ssh a0";
alias md="ssh md";
#=============================================================================#


#=============================================================================#
# git                                                                         #
#—————————————————————————————————————————————————————————————————————————————#
alias g="git"
alias gst="git status"
alias gci="git commit -a"
alias gpu="git push origin master"
#—————————————————————————————————————————————————————————————————————————————#
# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;
#=============================================================================#


#=============================================================================#
# zip                                                                         #
#—————————————————————————————————————————————————————————————————————————————#
function tc(){
    tar -zcvf "$1.tar.gz" "$1"
}
#—————————————————————————————————————————————————————————————————————————————#
function tx(){
    tar -zxvf $1
}
#—————————————————————————————————————————————————————————————————————————————#
# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";
    echo "${tmpFile}.gz created successfully.";
}
#—————————————————————————————————————————————————————————————————————————————#
# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1");
    local gzipsize=$(gzip -c "$1" | wc -c);
    local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

#=============================================================================#


#=============================================================================#
# admin                                                                       #
#—————————————————————————————————————————————————————————————————————————————#
# bash
alias cl="clear"
alias clc="clear"
alias h="history"
alias j="jobs"
#—————————————————————————————————————————————————————————————————————————————#
# cmd
alias ax="chmod a+x";
alias adm="sudo su admin";
alias admin="sudo su admin";
alias psa="ps aux | grep "
#—————————————————————————————————————————————————————————————————————————————#
# mkdir & enter
function mkd() {
    mkdir -p "$@" && cd "$@";
}
#—————————————————————————————————————————————————————————————————————————————#
# file size
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}
#—————————————————————————————————————————————————————————————————————————————#
# sudo typo
alias sudo='sudo '
#—————————————————————————————————————————————————————————————————————————————#
# tmux                                                                        #
alias tm="tmux"
alias tma="tmux a -t 0"
#—————————————————————————————————————————————————————————————————————————————#
# openssl
function genrsa() {
    openssl genrsa -out "$1_pri.pem" 1024
    openssl rsa -in "$1_pri.pem" -pubout -out "$1_pub.pem"
}
#=============================================================================#


#=============================================================================#
# node                                                                        #
#=============================================================================#
alias cnpm="npm --registry=https://registry.npm.taobao.org \
--cache=$HOME/.npm/.cache/cnpm \
--disturl=https://npm.taobao.org/dist \
--userconfig=$HOME/.cnpmrc"
#npm install tnpm --registry=http://registry.npm.alibaba-inc.com
#=============================================================================#


#=============================================================================#
# python                                                                      #
#—————————————————————————————————————————————————————————————————————————————#
alias p="ipython"
alias qt="nohup jupyter qtconsole &"
#—————————————————————————————————————————————————————————————————————————————#
# Tsinghua conda/pip mirror
#conda config --add channels 'https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/'
#conda config --set show_channel_urls yes

# Tsinghua pip mirror
#pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package

# Tsinghua pip mirror in ~/.pip/pip.conf
#[global]
#index-url = https://pypi.tuna.tsinghua.edu.cn/simple
#=============================================================================#


#=============================================================================#
# homebrew                                                                    #
#—————————————————————————————————————————————————————————————————————————————#
# Install
# /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

# Mirror
#export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles
#=============================================================================#


#=============================================================================#
# nginx                                                                       #
#—————————————————————————————————————————————————————————————————————————————#
alias ving="vi ${NGINX_HOME}/nginx.conf"
alias ngstart="${NGINX_HOME}/nginx"
alias ngreload="sudo ${NGINX_HOME}/nginx -s reload"
#=============================================================================#




#=============================================================================#
# postgres                                                                    #
#—————————————————————————————————————————————————————————————————————————————#
PGCTL="${PG_HOME}/bin/pg_ctl"
alias pgstart="${PGCTL} start -D ${PGDATA} -l ${PGDATA}/log"
alias pgstop="${PGCTL} stop -D ${PGDATA}"
alias pgrestart="${PGCTL} restart -D ${PGDATA}"
alias pgreload="${PGCTL} reload"
alias pgconf="vim ${PGDATA}/postgresql.conf"
alias pghba="vim ${PGDATA}/pg_hba.conf"

# Usage: `psql -c 'select * from account' | pg2md`
alias pg2md=" sed 's/+/|/g' | sed 's/^/|/' | sed 's/$/|/' |  grep -v rows | grep -v '||'"

# Usage: pgschema <database> <table>
function pgschema(){
    SQL="SELECT
      column_name    AS name,
      column_default AS default,
      is_nullable    AS nullable,
      udt_name       AS type
    FROM information_schema.columns
    WHERE table_name = '$2'
    ORDER BY ordinal_position;"
    psql $1 -c "${SQL}" | sed 's/+/|/g' | sed 's/^/|/' | sed 's/$/|/' |  grep -v rows | grep -v '||'
}
#=============================================================================#


#=============================================================================#
# encoding                                                                    #
#—————————————————————————————————————————————————————————————————————————————#
# length
alias len='python -c "import sys;print(len(sys.argv[1]))"'

# Format convert
alias yaml2json='ruby -ryaml -rjson -e "puts JSON.pretty_generate(YAML.load(STDIN.read))"'
alias json2yaml='ruby -ryaml -rjson -e "puts YAML.dump(JSON.parse(STDIN.read))"'

# URL
alias urlenc='python -c "import sys, urllib as ul; print(ul.quote(sys.argv[1]));"'
alias urldec='python -c "import sys, urllib as ul; print(ul.unquote(sys.argv[1]));"'

# Base64
alias b64enc='python -c "import sys,base64 as b;print(b.b64encode(sys.argv[1]));"'
alias b64dec='python -c "import sys,base64 as b;print(b.b64decode(sys.argv[1]));"'


#—————————————————————————————————————————————————————————————————————————————#
# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

#—————————————————————————————————————————————————————————————————————————————#
# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}
#—————————————————————————————————————————————————————————————————————————————#
# UTF-8-encode a string of Unicode symbols
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}
#—————————————————————————————————————————————————————————————————————————————#
# Decode \x{ABCD}-style Unicode escape sequences
function unidec() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}
#—————————————————————————————————————————————————————————————————————————————#
# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}
#=============================================================================#


#=============================================================================#
# network                                                                     #
#—————————————————————————————————————————————————————————————————————————————#
# IP addresses
# all ip / local ip / public ip
alias ip="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
alias localip="ifconfig getifaddr en0"
alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"


# Traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""
alias ap="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport"
#—————————————————————————————————————————————————————————————————————————————#
# DNS lookup util
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}
#—————————————————————————————————————————————————————————————————————————————#
# Show all names in SSL certificate for given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_header, no_serial, no_version, \
            no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
            echo "Common Name:";
            echo ""; # newline
            echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
            echo ""; # newline
            echo "Subject Alternative Name(s):";
            echo ""; # newline
            echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
                | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
            return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}
#=============================================================================#


#=============================================================================#
# darwin                                                                      #
#—————————————————————————————————————————————————————————————————————————————#
# Open
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}
#—————————————————————————————————————————————————————————————————————————————#
# Visual Studio Code
function c (){
    if [ $# -eq 0 ]; then
        VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args ".";
    else
        VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args "$@";
    fi;
}

function code (){
    if [ $# -eq 0 ]; then
        VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args ".";
    else
        VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args "$@";
    fi;
}

#—————————————————————————————————————————————————————————————————————————————#
# OS X hash
command -v md5sum > /dev/null || alias md5sum="md5"
command -v sha1sum > /dev/null || alias sha1sum="shasum"
#—————————————————————————————————————————————————————————————————————————————#
# Lock screen
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias lock="afk"
#—————————————————————————————————————————————————————————————————————————————#
# Get OS X Software Updates
alias osxupdate='sudo softwareupdate -i -a;'
#—————————————————————————————————————————————————————————————————————————————#
# Clean up LaunchServices to remove duplicates in the “Open With” menu
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
#—————————————————————————————————————————————————————————————————————————————#
# Recursively delete `.DS_Store` files
alias cleanup="find . -type f -name '*.DS_Store' -ls -delete"
#—————————————————————————————————————————————————————————————————————————————#
# Empty the Trash on all mounted volumes and the main HDD
# Also, clear Apple’s System Logs to improve shell startup speed
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"
#—————————————————————————————————————————————————————————————————————————————#
# Show/hide hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
#—————————————————————————————————————————————————————————————————————————————#
# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
#—————————————————————————————————————————————————————————————————————————————#
# Disable Spotlight
alias spotoff="sudo mdutil -a -i off"
# Enable Spotlight
alias spoton="sudo mdutil -a -i on"
#—————————————————————————————————————————————————————————————————————————————#
# PlistBuddy alias, because sometimes `defaults` just doesn’t cut it
alias plistbuddy="/usr/libexec/PlistBuddy"
#=============================================================================#


#=============================================================================#
# other                                                                       #
#—————————————————————————————————————————————————————————————————————————————#
# Get week number
alias week='date +%V'
#—————————————————————————————————————————————————————————————————————————————#
# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'
#—————————————————————————————————————————————————————————————————————————————#
# Merge PDF files
# Usage: `mergepdf -o output.pdf input{1,2,3}.pdf`
alias mergepdf='/System/Library/Automator/Combine\ PDF\ Pages.action/Contents/Resources/join.py'
#—————————————————————————————————————————————————————————————————————————————#
# Ring the terminal bell
alias badge="tput bel"
#—————————————————————————————————————————————————————————————————————————————#
# Map function:  find . -name .gitattributes | map dirname
alias map="xargs -n1"
#—————————————————————————————————————————————————————————————————————————————#
# Reload the shell (i.e. invoke as a login shell)
alias reload="exec $SHELL -l"
#—————————————————————————————————————————————————————————————————————————————#
# Setup or dismiss (goagent) proxy for curl, wget, etc.
alias gaproxy='export http_proxy=http://127.0.0.1:8087 https_proxy=http://127.0.0.1:8087'
alias noproxy='unset http_proxy https_proxy'
#—————————————————————————————————————————————————————————————————————————————#
# Canonical hex dump; some systems have this symlinked
command -v hd > /dev/null || alias hd="hexdump -C"
#—————————————————————————————————————————————————————————————————————————————#
# Generate UUID
alias uuid="uuidgen | tr '[:upper:]' '[:lower:]'"
#—————————————————————————————————————————————————————————————————————————————#
# Send SSH-key to remote host
function sendkey()
{
    PUBLIC_KEY=$HOME/.ssh/id_rsa.pub
    scp $PUBLIC_KEY "$1:~/key"
    echo "Run: "
    echo "      ssh $1"
    echo "      cat key >> ~/.ssh/authorized_keys;rm -f key;"
}
#—————————————————————————————————————————————————————————————————————————————#
# Simple calculator
function calc() {
    local result="";
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')";
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//';  # remove trailing zeros
    else
        printf "$result";
    fi;
    printf "\n";
}

#=============================================================================#